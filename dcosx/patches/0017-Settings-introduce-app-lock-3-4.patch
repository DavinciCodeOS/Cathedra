From 3997715369f0afea8fde2200c23de590d51a0046 Mon Sep 17 00:00:00 2001
From: jhonboy121 <alfredmathew05@gmail.com>
Date: Fri, 4 Feb 2022 23:31:45 +0530
Subject: [PATCH 1/1] Settings: introduce app lock [3/4]

Signed-off-by: jhonboy121 <alfredmathew05@gmail.com>
Change-Id: I9945fee2e29024abc77e692c917ae0c22a354003
---
 Android.bp                                    |   5 +-
 AndroidManifest.xml                           |   3 +
 res/layout/app_list_item.xml                  |  65 ++++
 res/layout/app_list_layout.xml                |  27 ++
 res/menu/app_list_menu.xml                    |  21 ++
 res/values/custom_arrays.xml                  |  21 ++
 res/values/custom_strings.xml                 |  20 ++
 res/values/dimens.xml                         |   3 +
 res/xml/app_lock_settings.xml                 |  45 +++
 res/xml/security_dashboard_settings.xml       |   8 +-
 .../settings/davincicode/AppListFragment.kt   | 317 ++++++++++++++++++
 .../settings/security/SecuritySettings.java   |  23 ++
 .../AppLockNotificationListFragment.kt        |  57 ++++
 ...AppLockNotificationPreferenceController.kt |  77 +++++
 .../applock/AppLockPackageListFragment.kt     |  57 ++++
 .../applock/AppLockSettingsFragment.kt        |  64 ++++
 .../AppLockSettingsPreferenceController.kt    | 108 ++++++
 .../AppLockTimeoutPreferenceController.kt     |  46 +++
 18 files changed, 965 insertions(+), 2 deletions(-)
 create mode 100644 res/layout/app_list_item.xml
 create mode 100644 res/layout/app_list_layout.xml
 create mode 100644 res/menu/app_list_menu.xml
 create mode 100644 res/xml/app_lock_settings.xml
 create mode 100644 src/com/android/settings/davincicode/AppListFragment.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockNotificationListFragment.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockNotificationPreferenceController.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockPackageListFragment.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockSettingsFragment.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
 create mode 100644 src/com/android/settings/security/applock/AppLockTimeoutPreferenceController.kt

diff --git a/Android.bp b/Android.bp
index 7d6c53d737..b3bcd95040 100644
--- a/Android.bp
+++ b/Android.bp
@@ -44,7 +44,9 @@ android_library {
         "SettingsLib-search-defaults",
     ],
 
-    srcs: ["src/**/*.java"],
+    srcs: ["src/**/*.java",
+           "src/**/*.kt",
+    ],
     resource_dirs: [
         "res",
         "res-pixel",
@@ -58,6 +60,7 @@ android_library {
         "androidx.slice_slice-view",
         "androidx.core_core",
         "androidx.appcompat_appcompat",
+        "androidx.fragment_fragment-ktx",
         "androidx.cardview_cardview",
         "androidx.preference_preference",
         "androidx.recyclerview_recyclerview",
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 172d2ed9b7..e0afed43d6 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -121,6 +121,9 @@
     <!-- LiveDisplay -->
     <uses-permission android:name="lineageos.permission.MANAGE_LIVEDISPLAY" />
 
+    <!-- App lock -->
+    <uses-permission android:name="android.permission.MANAGE_APP_LOCK" />
+
     <application
             android:name=".SettingsApplication"
             android:label="@string/settings_label"
diff --git a/res/layout/app_list_item.xml b/res/layout/app_list_item.xml
new file mode 100644
index 0000000000..39a5896cc1
--- /dev/null
+++ b/res/layout/app_list_item.xml
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2021-2022 AOSP-Krypton Project
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+         http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:settings="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:paddingStart="?android:attr/listPreferredItemPaddingStart"
+    android:paddingEnd="?android:attr/listPreferredItemPaddingEnd"
+    android:background="?android:attr/selectableItemBackground"
+    android:clipChildren="false"
+    android:clipToPadding="false">
+
+    <ImageView
+        android:id="@+id/icon"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginTop="4dp"
+        android:layout_marginBottom="4dp"
+        android:scaleType="centerInside"
+        settings:layout_constraintStart_toStartOf="parent"
+        settings:layout_constraintTop_toTopOf="parent" />
+
+    <TextView
+        android:id="@+id/label"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="@dimen/default_margin"
+        android:textAppearance="?android:attr/textAppearanceListItem"
+        android:textColor="?android:attr/textColorPrimary"
+        settings:layout_constraintStart_toEndOf="@id/icon"
+        settings:layout_constraintEnd_toStartOf="@id/checkBox"
+        settings:layout_constraintTop_toTopOf="@id/icon" />
+
+    <TextView
+        android:id="@+id/packageName"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:textColor="?android:attr/textColorSecondary"
+        settings:layout_constraintStart_toStartOf="@id/label"
+        settings:layout_constraintEnd_toEndOf="@id/label"
+        settings:layout_constraintTop_toBottomOf="@id/label"
+        settings:layout_constraintBottom_toBottomOf="@id/icon" />
+
+    <CheckBox
+        android:id="@+id/checkBox"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:focusable="false"
+        android:clickable="false"
+        settings:layout_constraintBottom_toBottomOf="@id/icon"
+        settings:layout_constraintEnd_toEndOf="parent"
+        settings:layout_constraintTop_toTopOf="@id/icon" />
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/res/layout/app_list_layout.xml b/res/layout/app_list_layout.xml
new file mode 100644
index 0000000000..d97c87cf6a
--- /dev/null
+++ b/res/layout/app_list_layout.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2021-2022 AOSP-Krypton Project
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+         http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/apps_list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <ProgressBar
+        android:id="@+id/loading_progress"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center" />
+</FrameLayout>
diff --git a/res/menu/app_list_menu.xml b/res/menu/app_list_menu.xml
new file mode 100644
index 0000000000..d02f4833e6
--- /dev/null
+++ b/res/menu/app_list_menu.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2021-2022 AOSP-Krypton Project
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+         http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item
+        android:id="@+id/search"
+        android:title="@string/search"
+        android:icon="@drawable/ic_find_in_page_24px"
+        android:showAsAction="ifRoom|collapseActionView"
+        android:actionViewClass="android.widget.SearchView" />
+</menu> 
diff --git a/res/values/custom_arrays.xml b/res/values/custom_arrays.xml
index 4c79a69fb1..223b1484a5 100644
--- a/res/values/custom_arrays.xml
+++ b/res/values/custom_arrays.xml
@@ -247,4 +247,25 @@
         <item>1</item>
     </string-array>
 
+    <!-- App lock timeout -->
+    <string-array name="app_lock_timeout_entries">
+        <item>5 seconds</item>
+        <item>10 seconds</item>
+        <item>30 seconds</item>
+        <item>1 minute</item>
+        <item>5 minutes</item>
+        <item>10 minutes</item>
+        <item>30 minutes</item>
+    </string-array>
+
+    <string-array name="app_lock_timeout_values" translatable="false">
+        <item>5000</item>
+        <item>10000</item>
+        <item>30000</item>
+        <item>60000</item>
+        <item>300000</item>
+        <item>600000</item>
+        <item>1800000</item>
+    </string-array>
+
 </resources>
diff --git a/res/values/custom_strings.xml b/res/values/custom_strings.xml
index 378ebfcd73..91fadc9b5b 100644
--- a/res/values/custom_strings.xml
+++ b/res/values/custom_strings.xml
@@ -120,4 +120,24 @@
     <!-- QS battery estimates -->
     <string name="qs_show_battery_estimate_title">Battery estimates</string>
     <string name="qs_show_battery_estimate_summary">Show estimated remaining battery life next to the icon. Needs SystemUI Restart</string>
+
+    <!-- App lock -->
+    <string name="app_lock_title">App lock</string>
+    <string name="app_lock_summary_singular">1 application is protected</string>
+    <string name="app_lock_summary_plural"><xliff:g example="2" id="Number of applications">%1$d</xliff:g> applications are protected</string>
+    <string name="app_lock_authentication_dialog_title">Unlock to continue</string>
+    <string name="app_lock_packages_title">Protected apps</string>
+    <string name="app_lock_packages_summary">Select the apps to protect with biometrics or device credentials</string>
+    <string name="app_lock_timeout_title">Auto lock timeout</string>
+    <string name="app_lock_timeout_summary">Duration of time after which an unlocked app in background should be locked</string>
+    <string name="app_lock_notifications_title">Collapse notifications</string>
+    <string name="app_lock_notifications_summary">
+          Notification content will be hidden and collapsed for selected apps when they are locked.
+          Heads up notifications will be automatically disabled.
+     </string>
+    <string name="app_lock_notifications_disabled_summary">Protect an application first</string>
+    <string name="app_lock_footer_text">Bubbles will be automatically dismissed after timeout</string>
+    <string name="search">Search</string>
+    <string name="search_apps">Search apps</string>
+
 </resources>
diff --git a/res/values/dimens.xml b/res/values/dimens.xml
index 2468db62bd..833b3e6a38 100755
--- a/res/values/dimens.xml
+++ b/res/values/dimens.xml
@@ -456,4 +456,7 @@
     <dimen name="chartview_trapezoid_radius">5dp</dimen>
     <dimen name="chartview_trapezoid_margin_start">1dp</dimen>
     <dimen name="chartview_trapezoid_margin_bottom">2dp</dimen>
+
+    <dimen name="default_margin">16dp</dimen>
+    <dimen name="default_padding">16dp</dimen>
 </resources>
diff --git a/res/xml/app_lock_settings.xml b/res/xml/app_lock_settings.xml
new file mode 100644
index 0000000000..2e78c3bb62
--- /dev/null
+++ b/res/xml/app_lock_settings.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2021 AOSP-Krypton Project
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+          http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:settings="http://schemas.android.com/apk/res-auto"
+    android:title="@string/app_lock_title">
+
+    <Preference
+        android:key="app_lock_packages"
+        android:title="@string/app_lock_packages_title"
+        android:summary="@string/app_lock_packages_summary"
+        android:persistent="false"
+        android:fragment="com.android.settings.security.applock.AppLockPackageListFragment" />
+
+    <ListPreference
+        android:key="app_lock_timeout"
+        android:title="@string/app_lock_timeout_title"
+        android:summary="@string/app_lock_timeout_summary"
+        android:entries="@array/app_lock_timeout_entries"
+        android:entryValues="@array/app_lock_timeout_values"
+        android:defaultValue="0"
+        android:persistent="false"
+        settings:controller="com.android.settings.security.applock.AppLockTimeoutPreferenceController" />
+
+    <Preference
+        android:key="app_lock_notifications"
+        android:title="@string/app_lock_notifications_title"
+        android:persistent="false"
+        android:fragment="com.android.settings.security.applock.AppLockNotificationListFragment"
+        settings:controller="com.android.settings.security.applock.AppLockNotificationPreferenceController" />
+
+    <com.android.settingslib.widget.FooterPreference
+        android:title="@string/app_lock_footer_text"
+        android:selectable="false"
+        settings:searchable="false" />
+</PreferenceScreen>
diff --git a/res/xml/security_dashboard_settings.xml b/res/xml/security_dashboard_settings.xml
index 5b687afc48..2c70da8d4b 100644
--- a/res/xml/security_dashboard_settings.xml
+++ b/res/xml/security_dashboard_settings.xml
@@ -60,6 +60,12 @@
             android:title="@string/security_settings_biometric_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_biometric_settings" />
+
+        <!-- App lock -->
+        <com.android.settingslib.RestrictedPreference
+            android:key="app_lock"
+            android:title="@string/app_lock_title"
+            settings:controller="com.android.settings.security.applock.AppLockSettingsPreferenceController" />
     </PreferenceCategory>
 
     <PreferenceCategory
@@ -170,4 +176,4 @@
 
     </PreferenceCategory>
 
-</PreferenceScreen>
\ No newline at end of file
+</PreferenceScreen>
diff --git a/src/com/android/settings/davincicode/AppListFragment.kt b/src/com/android/settings/davincicode/AppListFragment.kt
new file mode 100644
index 0000000000..5ce58f72ee
--- /dev/null
+++ b/src/com/android/settings/davincicode/AppListFragment.kt
@@ -0,0 +1,317 @@
+/*
+ * Copyright (C) 2021-2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.davincicode
+
+import android.content.Context
+import android.content.pm.PackageInfo
+import android.content.pm.PackageManager
+import android.graphics.drawable.Drawable
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.Menu
+import android.view.MenuInflater
+import android.view.MenuItem
+import android.view.View
+import android.view.ViewGroup
+import android.widget.CheckBox
+import android.widget.ImageView
+import android.widget.ProgressBar
+import android.widget.SearchView
+import android.widget.TextView
+
+import androidx.core.view.ViewCompat
+import androidx.fragment.app.Fragment
+import androidx.recyclerview.widget.DiffUtil
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.ListAdapter
+import androidx.recyclerview.widget.RecyclerView
+
+import com.google.android.material.appbar.AppBarLayout
+import com.android.settings.R
+
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.cancel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.sync.Mutex
+import kotlinx.coroutines.sync.withLock
+import kotlinx.coroutines.withContext
+
+/**
+ * [Fragment] that hosts a [RecyclerView] with a vertical
+ * list of application info. Items display an icon, name
+ * and package name of the application, along with a [CheckBox]
+ * indicating whether the item is selected or not.
+ */
+abstract class AppListFragment: Fragment(R.layout.app_list_layout), MenuItem.OnActionExpandListener {
+
+    private val mutex = Mutex()
+
+    private lateinit var fragmentScope: CoroutineScope
+    private lateinit var progressBar: ProgressBar
+    private lateinit var appBarLayout: AppBarLayout
+    private lateinit var packageManager: PackageManager
+    private lateinit var recyclerView: RecyclerView
+    private lateinit var adapter: AppListAdapter
+
+    private val packageList = mutableListOf<PackageInfo>()
+
+    private var searchText = ""
+    private var displayCategory: Int = CATEGORY_USER_ONLY
+    private var packageFilter: ((PackageInfo) -> Boolean) = { true }
+    private var packageComparator: ((PackageInfo, PackageInfo) -> Int) = { a, b ->
+        getLabel(a).compareTo(getLabel(b))
+    }
+
+    private var needsToHideProgressBar = false
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        fragmentScope = CoroutineScope(Dispatchers.Main)
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setHasOptionsMenu(true)
+        packageManager = requireContext().packageManager
+        packageList.addAll(packageManager.getInstalledPackages(0))
+    }
+
+    /**
+     * Override this function to set the title of this fragment.
+     */
+    abstract protected fun getTitle(): Int
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        requireActivity().setTitle(getTitle())
+        appBarLayout = requireActivity().findViewById(R.id.app_bar)
+        progressBar = view.findViewById(R.id.loading_progress)
+        adapter = AppListAdapter()
+        recyclerView = view.findViewById<RecyclerView>(R.id.apps_list).also {
+            it.layoutManager = LinearLayoutManager(context)
+            it.adapter = adapter
+        }
+        needsToHideProgressBar = true
+        refreshList()
+    }
+
+    /**
+     * Abstract function for subclasses to override for providing
+     * an inital list of packages that should appear as selected.
+     */
+    abstract protected fun getInitialCheckedList(): List<String>
+
+    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
+        inflater.inflate(R.menu.app_list_menu, menu)
+        val searchItem = menu.findItem(R.id.search).also {
+            it.setOnActionExpandListener(this)
+        }
+        val searchView = searchItem.actionView as SearchView
+        searchView.setQueryHint(getString(R.string.search_apps));
+        searchView.setOnQueryTextListener(object: SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String) = false
+
+            override fun onQueryTextChange(newText: String): Boolean {
+                fragmentScope.launch {
+                    mutex.withLock {
+                        searchText = newText
+                    }
+                    refreshList()
+                }
+                return true
+            }
+        })
+    }
+
+    override fun onMenuItemActionExpand(item: MenuItem): Boolean {
+        // To prevent a large space on tool bar.
+        appBarLayout.setExpanded(false /*expanded*/, false /*animate*/)
+        // To prevent user expanding the collapsing tool bar view.
+        ViewCompat.setNestedScrollingEnabled(recyclerView, false)
+        return true
+    }
+
+    override fun onMenuItemActionCollapse(item: MenuItem): Boolean {
+        // We keep the collapsed status after user cancel the search function.
+        appBarLayout.setExpanded(false /*expanded*/, false /*animate*/)
+        // Allow user to expande the tool bar view.
+        ViewCompat.setNestedScrollingEnabled(recyclerView, true)
+        return true
+    }
+
+    override fun onDetach() {
+        fragmentScope.cancel()
+        super.onDetach()
+    }
+
+    /**
+     * Set the type of apps that should be displayed in the list.
+     * Defaults to [CATEGORY_USER_ONLY].
+     *
+     * @param category one of [CATEGORY_SYSTEM_ONLY],
+     * [CATEGORY_USER_ONLY], [CATEGORY_BOTH]
+     */
+    fun setDisplayCategory(category: Int) {
+        fragmentScope.launch {
+            mutex.withLock {
+                displayCategory = category
+            }
+        }
+    }
+
+    /**
+     * Set a custom filter to filter out items from the list.
+     *
+     * @param customFilter a function that takes a [PackageInfo] and
+     * returns a [Boolean] indicating whether to show the item or not. 
+     */
+    fun setCustomFilter(customFilter: ((packageInfo: PackageInfo) -> Boolean)) {
+        fragmentScope.launch {
+            mutex.withLock {
+                packageFilter = customFilter
+            }
+        }
+    }
+
+    /**
+     * Set a [Comparator] for sorting the elements in the list..
+     *
+     * @param comparator a function that takes two [PackageInfo]'s and returns
+     * an [Int] representing their relative priority.
+     */
+    fun setComparator(comparator: ((a: PackageInfo, b: PackageInfo) -> Int)) {
+        fragmentScope.launch {
+            mutex.withLock {
+                packageComparator = comparator
+            }
+        }
+    }
+
+    /**
+     * Called when user selected list is updated.
+     *
+     * @param list a [List<String>] of selected items.
+     */
+    open protected fun onListUpdate(list: List<String>) {}
+
+    /**
+     * Called when user selected an application.
+     *
+     * @param packageName the package name of the selected app.
+     */
+    open protected fun onAppSelected(packageName: String) {}
+
+    /**
+     * Called when user deselected an application.
+     *
+     * @param packageName the package name of the deselected app.
+     */
+    open protected fun onAppDeselected(packageName: String) {}
+
+    protected fun refreshList() {
+        fragmentScope.launch {
+            val list = withContext(Dispatchers.Default) {
+                mutex.withLock {
+                    packageList.filter {
+                        when (displayCategory) {
+                            CATEGORY_SYSTEM_ONLY -> it.applicationInfo.isSystemApp()
+                            CATEGORY_USER_ONLY -> !it.applicationInfo.isSystemApp()
+                            else -> true
+                        } &&
+                        getLabel(it).contains(searchText, true) &&
+                        packageFilter(it)
+                    }.sortedWith(packageComparator).map { appInfofromPackage(it) }
+                }
+            }
+            adapter.submitList(list)
+            if (needsToHideProgressBar) {
+                progressBar.visibility = View.GONE
+                needsToHideProgressBar = false
+            }
+        }
+    }
+
+    private fun appInfofromPackage(packageInfo: PackageInfo): AppInfo =
+        AppInfo(
+            packageInfo.packageName,
+            getLabel(packageInfo),
+            packageInfo.applicationInfo.loadIcon(packageManager),
+        )
+
+    private fun getLabel(packageInfo: PackageInfo) =
+        packageInfo.applicationInfo.loadLabel(packageManager).toString()
+
+    private inner class AppListAdapter :
+            ListAdapter<AppInfo, AppListViewHolder>(itemCallback)
+    {
+        private val checkedList = getInitialCheckedList().toMutableList()
+
+        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int) =
+            AppListViewHolder(layoutInflater.inflate(
+                R.layout.app_list_item, parent, false))
+
+        override fun onBindViewHolder(holder: AppListViewHolder, position: Int) {
+            val item = getItem(position)
+            val pkg = item.packageName
+            holder.label.setText(item.label)
+            holder.packageName.setText(pkg)
+            holder.icon.setImageDrawable(item.icon)
+            holder.checkBox.setChecked(checkedList.contains(pkg))
+            holder.itemView.setOnClickListener {
+                if (checkedList.contains(pkg)){
+                    checkedList.remove(pkg)
+                    onAppDeselected(pkg)
+                } else {
+                    checkedList.add(pkg)
+                    onAppSelected(pkg)
+                }
+                notifyItemChanged(position)
+                onListUpdate(checkedList.toList())
+            }
+        }
+    }
+
+    private class AppListViewHolder(itemView: View) :
+            RecyclerView.ViewHolder(itemView) {
+        val icon: ImageView = itemView.findViewById(R.id.icon)
+        val label: TextView = itemView.findViewById(R.id.label)
+        val packageName: TextView = itemView.findViewById(R.id.packageName)
+        val checkBox: CheckBox = itemView.findViewById(R.id.checkBox)
+    }
+
+    private data class AppInfo(
+        val packageName: String,
+        val label: String,
+        val icon: Drawable,
+    )
+
+    companion object {
+        private const val TAG = "AppListFragment"
+
+        const val CATEGORY_SYSTEM_ONLY = 0
+        const val CATEGORY_USER_ONLY = 1
+        const val CATEGORY_BOTH = 2
+
+        private val itemCallback = object : DiffUtil.ItemCallback<AppInfo>() {
+            override fun areItemsTheSame(oldInfo: AppInfo, newInfo: AppInfo) =
+                oldInfo.packageName == newInfo.packageName
+
+            override fun areContentsTheSame(oldInfo: AppInfo, newInfo: AppInfo) =
+                oldInfo == newInfo
+        }
+    }
+}
diff --git a/src/com/android/settings/security/SecuritySettings.java b/src/com/android/settings/security/SecuritySettings.java
index be123f2339..9a3805306a 100644
--- a/src/com/android/settings/security/SecuritySettings.java
+++ b/src/com/android/settings/security/SecuritySettings.java
@@ -21,6 +21,9 @@ import android.app.settings.SettingsEnums;
 import android.content.Context;
 import android.content.Intent;
 
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult;
+
 import com.android.settings.R;
 import com.android.settings.biometrics.combination.CombinedBiometricProfileStatusPreferenceController;
 import com.android.settings.biometrics.combination.CombinedBiometricStatusPreferenceController;
@@ -32,7 +35,9 @@ import com.android.settings.dashboard.DashboardFragment;
 import com.android.settings.enterprise.EnterprisePrivacyPreferenceController;
 import com.android.settings.enterprise.FinancedPrivacyPreferenceController;
 import com.android.settings.overlay.FeatureFactory;
+import com.android.settings.password.ConfirmDeviceCredentialActivity;
 import com.android.settings.search.BaseSearchIndexProvider;
+import com.android.settings.security.applock.AppLockSettingsPreferenceController;
 import com.android.settings.security.trustagent.ManageTrustAgentsPreferenceController;
 import com.android.settings.security.trustagent.TrustAgentListPreferenceController;
 import com.android.settings.widget.PreferenceCategoryController;
@@ -54,6 +59,14 @@ public class SecuritySettings extends DashboardFragment {
     public static final int UNIFY_LOCK_CONFIRM_PROFILE_REQUEST = 129;
     public static final int UNUNIFY_LOCK_CONFIRM_DEVICE_REQUEST = 130;
 
+    private final ActivityResultLauncher<Intent> mSecurityPromptLauncher;
+
+    public SecuritySettings() {
+        mSecurityPromptLauncher = registerForActivityResult(new StartActivityForResult(),
+            resultData -> use(AppLockSettingsPreferenceController.class)
+                .handleActivityResult(resultData));
+    }
+
     @Override
     public int getMetricsCategory() {
         return SettingsEnums.SECURITY;
@@ -95,6 +108,15 @@ public class SecuritySettings extends DashboardFragment {
         super.onActivityResult(requestCode, resultCode, data);
     }
 
+    public void showAppLockSecurityPrompt() {
+        mSecurityPromptLauncher.launch(
+            ConfirmDeviceCredentialActivity.createIntent(
+                getString(R.string.app_lock_authentication_dialog_title),
+                null /* details */
+            )
+        );
+    }
+
     void startUnification() {
         use(LockUnificationPreferenceController.class).startUnification();
     }
@@ -141,6 +163,7 @@ public class SecuritySettings extends DashboardFragment {
         controllers.add(new PreferenceCategoryController(context, WORK_PROFILE_SECURITY_CATEGORY)
                 .setChildren(profileSecurityControllers));
         controllers.addAll(profileSecurityControllers);
+        controllers.add(new AppLockSettingsPreferenceController(context, host, lifecycle));
 
         return controllers;
     }
diff --git a/src/com/android/settings/security/applock/AppLockNotificationListFragment.kt b/src/com/android/settings/security/applock/AppLockNotificationListFragment.kt
new file mode 100644
index 0000000000..32abcc3001
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockNotificationListFragment.kt
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.AppLockManager
+import android.os.Bundle
+import android.view.View
+
+import com.android.settings.R
+import com.android.settings.davincicode.AppListFragment
+
+class AppLockNotificationListFragment : AppListFragment() {
+
+    private lateinit var appLockManager: AppLockManager
+    private val lockedPackages = mutableListOf<String>()
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        appLockManager = requireContext().getSystemService(AppLockManager::class.java)
+        lockedPackages.addAll(appLockManager.getPackages())
+    }
+
+    override protected fun getTitle(): Int = R.string.app_lock_notifications_title
+
+    override protected fun getInitialCheckedList(): List<String> =
+        appLockManager.getPackagesWithSecureNotifications()
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        setDisplayCategory(CATEGORY_BOTH)
+        setCustomFilter {
+            lockedPackages.contains(it.packageName)
+        }
+        super.onViewCreated(view, savedInstanceState)
+    }
+
+    override protected fun onAppSelected(packageName: String) {
+        appLockManager.setSecureNotification(packageName, true)
+    }
+
+    override protected fun onAppDeselected(packageName: String) {
+        appLockManager.setSecureNotification(packageName, false)
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockNotificationPreferenceController.kt b/src/com/android/settings/security/applock/AppLockNotificationPreferenceController.kt
new file mode 100644
index 0000000000..1ef312fb84
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockNotificationPreferenceController.kt
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.AppLockManager
+import android.content.Context
+import android.os.UserHandle
+
+import androidx.lifecycle.Lifecycle.Event
+import androidx.lifecycle.LifecycleEventObserver
+import androidx.lifecycle.LifecycleOwner
+import androidx.preference.Preference
+import androidx.preference.PreferenceScreen
+
+import com.android.internal.widget.LockPatternUtils
+import com.android.settings.R
+import com.android.settingslib.core.lifecycle.Lifecycle
+import com.android.settings.core.BasePreferenceController
+
+class AppLockNotificationPreferenceController(
+    private val context: Context,
+    lifecycle: Lifecycle?,
+) : BasePreferenceController(context, KEY),
+    LifecycleEventObserver {
+
+    private val appLockManager = context.getSystemService(AppLockManager::class.java)
+
+    private var preference: Preference? = null
+
+    init {
+        lifecycle?.addObserver(this)
+    }
+
+    override fun getAvailabilityStatus() =
+        if (appLockManager.getPackages().isNotEmpty()) AVAILABLE else DISABLED_DEPENDENT_SETTING
+
+    override fun onStateChanged(owner: LifecycleOwner, event: Event) {
+        if (event == Event.ON_START) {
+            preference?.let {
+                updateState(it)
+            }
+        }
+    }
+
+    override fun displayPreference(screen: PreferenceScreen) {
+        super.displayPreference(screen)
+        preference = screen.findPreference(preferenceKey)
+    }
+
+    override fun updateState(preference: Preference) {
+        if (getAvailabilityStatus() == AVAILABLE) {
+            preference.setEnabled(true)
+            preference.summary = context.getString(R.string.app_lock_notifications_summary)
+        } else {
+            preference.setEnabled(false)
+            preference.summary = context.getString(R.string.app_lock_notifications_disabled_summary)
+        }
+    }
+
+    companion object {
+        private const val KEY = "app_lock_notifications"
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockPackageListFragment.kt b/src/com/android/settings/security/applock/AppLockPackageListFragment.kt
new file mode 100644
index 0000000000..1d4cc45211
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockPackageListFragment.kt
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.AppLockManager
+import android.os.Bundle
+import android.view.View
+
+import com.android.settings.R
+import com.android.settings.davincicode.AppListFragment
+
+class AppLockPackageListFragment : AppListFragment() {
+
+    private lateinit var appLockManager: AppLockManager
+    private val whiteListedPackages = mutableListOf<String>()
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        appLockManager = requireContext().getSystemService(AppLockManager::class.java)
+        whiteListedPackages.addAll(requireContext().resources.getStringArray(
+            com.android.internal.R.array.config_appLockAllowedSystemApps).toList())
+    }
+
+    override protected fun getTitle(): Int = R.string.app_lock_packages_title
+
+    override protected fun getInitialCheckedList(): List<String> = appLockManager.getPackages()
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        setDisplayCategory(CATEGORY_BOTH)
+        setCustomFilter {
+            !it.applicationInfo.isSystemApp() || whiteListedPackages.contains(it.packageName)
+        }
+        super.onViewCreated(view, savedInstanceState)
+    }
+
+    override protected fun onAppSelected(packageName: String) {
+        appLockManager.addPackage(packageName)
+    }
+
+    override protected fun onAppDeselected(packageName: String) {
+        appLockManager.removePackage(packageName)
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockSettingsFragment.kt b/src/com/android/settings/security/applock/AppLockSettingsFragment.kt
new file mode 100644
index 0000000000..ed36de51b8
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockSettingsFragment.kt
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import com.android.internal.logging.nano.MetricsProto
+
+import android.content.Context
+
+import com.android.settings.R
+import com.android.settings.search.BaseSearchIndexProvider
+import com.android.settingslib.core.AbstractPreferenceController
+import com.android.settingslib.core.lifecycle.Lifecycle
+import com.android.settingslib.search.SearchIndexable
+import com.android.settings.dashboard.DashboardFragment
+
+@SearchIndexable
+class AppLockSettingsFragment : DashboardFragment() {
+
+    override protected fun getPreferenceScreenResId() = R.xml.app_lock_settings
+
+    override protected fun getLogTag() = TAG
+
+    override fun getMetricsCategory(): Int = 1800
+
+    override protected fun createPreferenceControllers(context: Context) =
+        buildPreferenceControllers(context, settingsLifecycle)
+
+    companion object {
+        private const val TAG = "AppLockSettingsFragment"
+
+        @JvmField
+        val SEARCH_INDEX_DATA_PROVIDER = object : BaseSearchIndexProvider(
+            R.xml.app_lock_settings
+        ) {
+            override fun createPreferenceControllers(context: Context) =
+                buildPreferenceControllers(context)
+        }
+
+        fun buildPreferenceControllers(
+            context: Context,
+            lifecycle: Lifecycle? = null
+        ): List<AbstractPreferenceController> =
+            listOf(
+                AppLockNotificationPreferenceController(
+                    context,
+                    lifecycle,
+                )
+            )
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt b/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
new file mode 100644
index 0000000000..64f1f66353
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockSettingsPreferenceController.kt
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.Activity
+import android.app.AppLockManager
+import android.content.Context
+import android.os.UserHandle
+
+import androidx.activity.result.ActivityResult
+import androidx.lifecycle.Lifecycle.Event
+import androidx.lifecycle.LifecycleEventObserver
+import androidx.lifecycle.LifecycleOwner
+import androidx.preference.Preference
+import androidx.preference.PreferenceScreen
+
+import com.android.internal.widget.LockPatternUtils
+import com.android.settings.core.SubSettingLauncher
+import com.android.settings.R
+import com.android.settings.security.SecuritySettings
+import com.android.settingslib.core.lifecycle.Lifecycle
+import com.android.settingslib.transition.SettingsTransitionHelper.TransitionType
+import com.android.settings.core.BasePreferenceController
+
+class AppLockSettingsPreferenceController(
+    private val context: Context,
+    private val host: SecuritySettings?,
+    lifecycle: Lifecycle?,
+) : BasePreferenceController(context, KEY),
+        LifecycleEventObserver {
+
+    private val lockPatternUtils = LockPatternUtils(context)
+    private val appLockManager = context.getSystemService(AppLockManager::class.java)
+    private var preference: Preference? = null
+
+    init {
+        lifecycle?.addObserver(this)
+    }
+
+    override fun getAvailabilityStatus() =
+        if (lockPatternUtils.isSecure(UserHandle.myUserId())) AVAILABLE else DISABLED_DEPENDENT_SETTING
+
+    override fun onStateChanged(owner: LifecycleOwner, event: Event) {
+        if (event == Event.ON_START) {
+            preference?.let {
+                updateState(it)
+            }
+        }
+    }
+
+    override fun displayPreference(screen: PreferenceScreen) {
+        super.displayPreference(screen)
+        preference = screen.findPreference(preferenceKey)
+    }
+
+    override fun updateState(preference: Preference) {
+        if (getAvailabilityStatus() == AVAILABLE) {
+            preference.setEnabled(true)
+            preference.summary = getSummaryForListSize(appLockManager.getPackages().size)
+        } else {
+            preference.setEnabled(false)
+            preference.summary = context.getString(R.string.disabled_because_no_backup_security)
+        }
+    }
+
+    private fun getSummaryForListSize(size: Int): CharSequence? =
+        when {
+            size == 0 -> null
+            size == 1 -> context.getString(R.string.app_lock_summary_singular)
+            else -> context.getString(R.string.app_lock_summary_plural, size)
+        }
+
+    override fun handlePreferenceTreeClick(preference: Preference): Boolean {
+        if (this.preference == preference && host != null) {
+            host.showAppLockSecurityPrompt()
+            return true
+        }
+        return false
+    }
+
+    fun handleActivityResult(activityResult: ActivityResult?) {
+        if (activityResult?.resultCode == Activity.RESULT_OK && host != null) {
+            SubSettingLauncher(context)
+                .setDestination(AppLockSettingsFragment::class.qualifiedName)
+                .setSourceMetricsCategory(host.metricsCategory)
+                .setTransitionType(TransitionType.TRANSITION_SLIDE)
+                .launch()
+        }
+    }
+
+    companion object {
+        private const val KEY = "app_lock"
+    }
+}
diff --git a/src/com/android/settings/security/applock/AppLockTimeoutPreferenceController.kt b/src/com/android/settings/security/applock/AppLockTimeoutPreferenceController.kt
new file mode 100644
index 0000000000..6703fac353
--- /dev/null
+++ b/src/com/android/settings/security/applock/AppLockTimeoutPreferenceController.kt
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2022 AOSP-Krypton Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.applock
+
+import android.app.AppLockManager
+import android.content.Context
+
+import androidx.preference.ListPreference
+import androidx.preference.Preference
+
+import com.android.settings.core.BasePreferenceController
+
+class AppLockTimeoutPreferenceController(
+    context: Context,
+    key: String,
+) : BasePreferenceController(context, key),
+        Preference.OnPreferenceChangeListener {
+
+    private val appLockManager = context.getSystemService(AppLockManager::class.java)
+
+    override fun getAvailabilityStatus() = AVAILABLE
+
+    override fun updateState(preference: Preference) {
+        val timeout = appLockManager.getTimeout()
+        (preference as ListPreference).value = if (timeout == -1L) null else timeout.toString()
+    }
+
+    override fun onPreferenceChange(preference: Preference, newValue: Any): Boolean {
+        appLockManager.setTimeout((newValue as String).toLong())
+        return true
+    }
+}
-- 
2.35.3

